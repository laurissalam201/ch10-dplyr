# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- c(vehicles$make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
?order
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997, vehicles$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles_1997 <- vehicles_1997[order(vehicles_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (cty + hwy) / 2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$cty + vehicles_1997$hwy) / 2
vehicles_1997
colnames(vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two-wheel_20 <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- two-wheel_20$id[two-wheel_20$hwy == min(two-wheel_20$hwy), ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20 <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- two_wheel_20$id[two_wheel_20$hwy == min(two_wheel_20$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- two_wheel_20$id[two_wheel_20$hwy == min(two_wheel_20$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy <- function(year_choice, make_choice) {
vehicles_year <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
most <- vehicles_year[vehicles_year$hwy == max(vehicles_year$hwy)]
most
}
# What was the most efficient Honda model of 1995?
most_hwy(1995, Honda)
# What was the most efficient Honda model of 1995?
most_hwy(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy <- function(year_choice, make_choice) {
vehicles_year <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
most <- vehicles_year$model[vehicles_year$hwy == max(vehicles_year$hwy)]
most
}
# What was the most efficient Honda model of 1995?
most_hwy(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy <- function(year_choice, make_choice) {
vehicles_year <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
most <- vehicles_year[vehicles_year$hwy == max(vehicles_year$hwy), 'model']
most
}
# What was the most efficient Honda model of 1995?
most_hwy(1995, "Honda")
worse
worst
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acuras <- filter(vehicles, make == "Acura", year == 2015)
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "dplyr" library
nstall.packages("dplyr")
# Install (if needed) and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acuras <- filter(vehicles, make == "Acura", year == 2015)
best_hwy <- filter(acuras, hwy == max(acuras$hwy))
best_model <- select(best_hwy, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(filter(filter(vehicles, make == "Acura", year == 2015), hwy = max(hwy)), model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(filter(filter(vehicles, make == "Acura", year == 2015), hwy == max(hwy)), model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
acuras <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(acuras, hwy == max(hwy)) %>%
select(best_hwy, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
acuras <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(acuras, hwy == max(hwy)) %>%
select(best_hwy, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_model <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(acuras, hwy == max(hwy)) %>%
select(best_hwy, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_model <- filter(vehicles, make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
length(distinct(manufacturers))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
length(distinct(manufacturers))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(manufacturers))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- order(hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(vehicles_1997, average = (hwy + cty)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel <- filter(vehicles_1997, drive == "2-Wheel Drive", cty > 20 )
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- filter(two_wheel, hwy == min(hwy))
worse_id <- select(worst, id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_of_year <- function(year_choice, make_choice){
most_miles <- filter(vehicles, year == year_choice, make == make_choice, hwy == max(hwy))
model <- select(most_miles, model)
model
}
# What was the most efficient Honda model of 1995?
most_of_year(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_of_year <- function(year_choice, make_choice){
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_of_year <- function(year_choice, make_choice){
most_miles <- filter(vehicles, year == year_choice, make == make_choice)
most_miles <- filter(most_miles, hwy == max(hwy))
model <- select(most_miles, model)
model
}
# What was the most efficient Honda model of 1995?
most_of_year(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_of_year <- function(year_choice, make_choice){
most_miles <- filter(vehicles, year == year_choice, make == make_choice)
max_hwy <- filter(most_miles, hwy == max(hwy))
model <- select(max_hwy, model)
model
}
# What was the most efficient Honda model of 1995?
most_of_year(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_of_year <- function(year_choice, make_choice){
most_miles <- filter(vehicles, year == year_choice, make == make_choice)
max_hwy <- filter(most_miles, hwy == max(hwy))
most_model <- select(max_hwy, model)
most_model
}
# What was the most efficient Honda model of 1995?
most_of_year(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(make_choice, year_choice) {
filtered <- filter(vehicles, make == make_choice, year == year_choice)
filtered <- filter(filtered, hwy == max(hwy))
selected <- select(filtered, model)
selected
}
# What was the most efficient Honda model of 1995?
make_year_filter('Honda', 1995)
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(vehicles_1997, average = (hwy + cty)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel <- filter(vehicles_1997, drive == "2-Wheel Drive", cty > 20 )
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst <- filter(two_wheel, hwy == min(hwy))
worse_id <- select(worst, id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_of_year <- function(year_choice, make_choice){
most_miles <- filter(vehicles, year == year_choice, make == make_choice)
max_hwy <- filter(most_miles, hwy == max(hwy))
model <- select(max_hwy, model)
model
}
# What was the most efficient Honda model of 1995?
most_of_year(1995, "Honda")
